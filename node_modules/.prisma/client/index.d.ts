
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Puppet
 * 
 */
export type Puppet = {
  id: number
  name: string
  description: string
  createdAt: Date
  updatedAt: Date
  masterId: number
  stringId: number
}

/**
 * Model PuppetMaster
 * 
 */
export type PuppetMaster = {
  id: number
  name: string
  description: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model PuppetStrings
 * 
 */
export type PuppetStrings = {
  id: number
  count: number
  material: string
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Puppets
 * const puppets = await prisma.puppet.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Puppets
   * const puppets = await prisma.puppet.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.puppet`: Exposes CRUD operations for the **Puppet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Puppets
    * const puppets = await prisma.puppet.findMany()
    * ```
    */
  get puppet(): Prisma.PuppetDelegate<GlobalReject>;

  /**
   * `prisma.puppetMaster`: Exposes CRUD operations for the **PuppetMaster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PuppetMasters
    * const puppetMasters = await prisma.puppetMaster.findMany()
    * ```
    */
  get puppetMaster(): Prisma.PuppetMasterDelegate<GlobalReject>;

  /**
   * `prisma.puppetStrings`: Exposes CRUD operations for the **PuppetStrings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PuppetStrings
    * const puppetStrings = await prisma.puppetStrings.findMany()
    * ```
    */
  get puppetStrings(): Prisma.PuppetStringsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.1.1
   * Query Engine version: 8d8414deb360336e4698a65aa45a1fbaf1ce13d8
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Puppet: 'Puppet',
    PuppetMaster: 'PuppetMaster',
    PuppetStrings: 'PuppetStrings'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PuppetMasterCountOutputType
   */


  export type PuppetMasterCountOutputType = {
    puppets: number
  }

  export type PuppetMasterCountOutputTypeSelect = {
    puppets?: boolean
  }

  export type PuppetMasterCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PuppetMasterCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PuppetMasterCountOutputType
    : S extends undefined
    ? never
    : S extends PuppetMasterCountOutputTypeArgs
    ?'include' extends U
    ? PuppetMasterCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PuppetMasterCountOutputType ? PuppetMasterCountOutputType[P] : never
  } 
    : PuppetMasterCountOutputType
  : PuppetMasterCountOutputType




  // Custom InputTypes

  /**
   * PuppetMasterCountOutputType without action
   */
  export type PuppetMasterCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PuppetMasterCountOutputType
     * 
    **/
    select?: PuppetMasterCountOutputTypeSelect | null
  }



  /**
   * Count Type PuppetStringsCountOutputType
   */


  export type PuppetStringsCountOutputType = {
    puppets: number
  }

  export type PuppetStringsCountOutputTypeSelect = {
    puppets?: boolean
  }

  export type PuppetStringsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PuppetStringsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PuppetStringsCountOutputType
    : S extends undefined
    ? never
    : S extends PuppetStringsCountOutputTypeArgs
    ?'include' extends U
    ? PuppetStringsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PuppetStringsCountOutputType ? PuppetStringsCountOutputType[P] : never
  } 
    : PuppetStringsCountOutputType
  : PuppetStringsCountOutputType




  // Custom InputTypes

  /**
   * PuppetStringsCountOutputType without action
   */
  export type PuppetStringsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PuppetStringsCountOutputType
     * 
    **/
    select?: PuppetStringsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Puppet
   */


  export type AggregatePuppet = {
    _count: PuppetCountAggregateOutputType | null
    _avg: PuppetAvgAggregateOutputType | null
    _sum: PuppetSumAggregateOutputType | null
    _min: PuppetMinAggregateOutputType | null
    _max: PuppetMaxAggregateOutputType | null
  }

  export type PuppetAvgAggregateOutputType = {
    id: number | null
    masterId: number | null
    stringId: number | null
  }

  export type PuppetSumAggregateOutputType = {
    id: number | null
    masterId: number | null
    stringId: number | null
  }

  export type PuppetMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    masterId: number | null
    stringId: number | null
  }

  export type PuppetMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    masterId: number | null
    stringId: number | null
  }

  export type PuppetCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    masterId: number
    stringId: number
    _all: number
  }


  export type PuppetAvgAggregateInputType = {
    id?: true
    masterId?: true
    stringId?: true
  }

  export type PuppetSumAggregateInputType = {
    id?: true
    masterId?: true
    stringId?: true
  }

  export type PuppetMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    masterId?: true
    stringId?: true
  }

  export type PuppetMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    masterId?: true
    stringId?: true
  }

  export type PuppetCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    masterId?: true
    stringId?: true
    _all?: true
  }

  export type PuppetAggregateArgs = {
    /**
     * Filter which Puppet to aggregate.
     * 
    **/
    where?: PuppetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Puppets to fetch.
     * 
    **/
    orderBy?: Enumerable<PuppetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PuppetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Puppets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Puppets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Puppets
    **/
    _count?: true | PuppetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PuppetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PuppetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PuppetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PuppetMaxAggregateInputType
  }

  export type GetPuppetAggregateType<T extends PuppetAggregateArgs> = {
        [P in keyof T & keyof AggregatePuppet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePuppet[P]>
      : GetScalarType<T[P], AggregatePuppet[P]>
  }




  export type PuppetGroupByArgs = {
    where?: PuppetWhereInput
    orderBy?: Enumerable<PuppetOrderByWithAggregationInput>
    by: Array<PuppetScalarFieldEnum>
    having?: PuppetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PuppetCountAggregateInputType | true
    _avg?: PuppetAvgAggregateInputType
    _sum?: PuppetSumAggregateInputType
    _min?: PuppetMinAggregateInputType
    _max?: PuppetMaxAggregateInputType
  }


  export type PuppetGroupByOutputType = {
    id: number
    name: string
    description: string
    createdAt: Date
    updatedAt: Date
    masterId: number
    stringId: number
    _count: PuppetCountAggregateOutputType | null
    _avg: PuppetAvgAggregateOutputType | null
    _sum: PuppetSumAggregateOutputType | null
    _min: PuppetMinAggregateOutputType | null
    _max: PuppetMaxAggregateOutputType | null
  }

  type GetPuppetGroupByPayload<T extends PuppetGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PuppetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PuppetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PuppetGroupByOutputType[P]>
            : GetScalarType<T[P], PuppetGroupByOutputType[P]>
        }
      >
    >


  export type PuppetSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    masterId?: boolean
    master?: boolean | PuppetMasterArgs
    strings?: boolean | PuppetStringsArgs
    stringId?: boolean
  }

  export type PuppetInclude = {
    master?: boolean | PuppetMasterArgs
    strings?: boolean | PuppetStringsArgs
  }

  export type PuppetGetPayload<
    S extends boolean | null | undefined | PuppetArgs,
    U = keyof S
      > = S extends true
        ? Puppet
    : S extends undefined
    ? never
    : S extends PuppetArgs | PuppetFindManyArgs
    ?'include' extends U
    ? Puppet  & {
    [P in TrueKeys<S['include']>]:
        P extends 'master' ? PuppetMasterGetPayload<S['include'][P]> :
        P extends 'strings' ? PuppetStringsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'master' ? PuppetMasterGetPayload<S['select'][P]> :
        P extends 'strings' ? PuppetStringsGetPayload<S['select'][P]> :  P extends keyof Puppet ? Puppet[P] : never
  } 
    : Puppet
  : Puppet


  type PuppetCountArgs = Merge<
    Omit<PuppetFindManyArgs, 'select' | 'include'> & {
      select?: PuppetCountAggregateInputType | true
    }
  >

  export interface PuppetDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Puppet that matches the filter.
     * @param {PuppetFindUniqueArgs} args - Arguments to find a Puppet
     * @example
     * // Get one Puppet
     * const puppet = await prisma.puppet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PuppetFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PuppetFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Puppet'> extends True ? CheckSelect<T, Prisma__PuppetClient<Puppet>, Prisma__PuppetClient<PuppetGetPayload<T>>> : CheckSelect<T, Prisma__PuppetClient<Puppet | null >, Prisma__PuppetClient<PuppetGetPayload<T> | null >>

    /**
     * Find the first Puppet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetFindFirstArgs} args - Arguments to find a Puppet
     * @example
     * // Get one Puppet
     * const puppet = await prisma.puppet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PuppetFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PuppetFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Puppet'> extends True ? CheckSelect<T, Prisma__PuppetClient<Puppet>, Prisma__PuppetClient<PuppetGetPayload<T>>> : CheckSelect<T, Prisma__PuppetClient<Puppet | null >, Prisma__PuppetClient<PuppetGetPayload<T> | null >>

    /**
     * Find zero or more Puppets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Puppets
     * const puppets = await prisma.puppet.findMany()
     * 
     * // Get first 10 Puppets
     * const puppets = await prisma.puppet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const puppetWithIdOnly = await prisma.puppet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PuppetFindManyArgs>(
      args?: SelectSubset<T, PuppetFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Puppet>>, PrismaPromise<Array<PuppetGetPayload<T>>>>

    /**
     * Create a Puppet.
     * @param {PuppetCreateArgs} args - Arguments to create a Puppet.
     * @example
     * // Create one Puppet
     * const Puppet = await prisma.puppet.create({
     *   data: {
     *     // ... data to create a Puppet
     *   }
     * })
     * 
    **/
    create<T extends PuppetCreateArgs>(
      args: SelectSubset<T, PuppetCreateArgs>
    ): CheckSelect<T, Prisma__PuppetClient<Puppet>, Prisma__PuppetClient<PuppetGetPayload<T>>>

    /**
     * Create many Puppets.
     *     @param {PuppetCreateManyArgs} args - Arguments to create many Puppets.
     *     @example
     *     // Create many Puppets
     *     const puppet = await prisma.puppet.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PuppetCreateManyArgs>(
      args?: SelectSubset<T, PuppetCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Puppet.
     * @param {PuppetDeleteArgs} args - Arguments to delete one Puppet.
     * @example
     * // Delete one Puppet
     * const Puppet = await prisma.puppet.delete({
     *   where: {
     *     // ... filter to delete one Puppet
     *   }
     * })
     * 
    **/
    delete<T extends PuppetDeleteArgs>(
      args: SelectSubset<T, PuppetDeleteArgs>
    ): CheckSelect<T, Prisma__PuppetClient<Puppet>, Prisma__PuppetClient<PuppetGetPayload<T>>>

    /**
     * Update one Puppet.
     * @param {PuppetUpdateArgs} args - Arguments to update one Puppet.
     * @example
     * // Update one Puppet
     * const puppet = await prisma.puppet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PuppetUpdateArgs>(
      args: SelectSubset<T, PuppetUpdateArgs>
    ): CheckSelect<T, Prisma__PuppetClient<Puppet>, Prisma__PuppetClient<PuppetGetPayload<T>>>

    /**
     * Delete zero or more Puppets.
     * @param {PuppetDeleteManyArgs} args - Arguments to filter Puppets to delete.
     * @example
     * // Delete a few Puppets
     * const { count } = await prisma.puppet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PuppetDeleteManyArgs>(
      args?: SelectSubset<T, PuppetDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Puppets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Puppets
     * const puppet = await prisma.puppet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PuppetUpdateManyArgs>(
      args: SelectSubset<T, PuppetUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Puppet.
     * @param {PuppetUpsertArgs} args - Arguments to update or create a Puppet.
     * @example
     * // Update or create a Puppet
     * const puppet = await prisma.puppet.upsert({
     *   create: {
     *     // ... data to create a Puppet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Puppet we want to update
     *   }
     * })
    **/
    upsert<T extends PuppetUpsertArgs>(
      args: SelectSubset<T, PuppetUpsertArgs>
    ): CheckSelect<T, Prisma__PuppetClient<Puppet>, Prisma__PuppetClient<PuppetGetPayload<T>>>

    /**
     * Find one Puppet that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PuppetFindUniqueOrThrowArgs} args - Arguments to find a Puppet
     * @example
     * // Get one Puppet
     * const puppet = await prisma.puppet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PuppetFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PuppetFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PuppetClient<Puppet>, Prisma__PuppetClient<PuppetGetPayload<T>>>

    /**
     * Find the first Puppet that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetFindFirstOrThrowArgs} args - Arguments to find a Puppet
     * @example
     * // Get one Puppet
     * const puppet = await prisma.puppet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PuppetFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PuppetFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PuppetClient<Puppet>, Prisma__PuppetClient<PuppetGetPayload<T>>>

    /**
     * Count the number of Puppets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetCountArgs} args - Arguments to filter Puppets to count.
     * @example
     * // Count the number of Puppets
     * const count = await prisma.puppet.count({
     *   where: {
     *     // ... the filter for the Puppets we want to count
     *   }
     * })
    **/
    count<T extends PuppetCountArgs>(
      args?: Subset<T, PuppetCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PuppetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Puppet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PuppetAggregateArgs>(args: Subset<T, PuppetAggregateArgs>): PrismaPromise<GetPuppetAggregateType<T>>

    /**
     * Group by Puppet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PuppetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PuppetGroupByArgs['orderBy'] }
        : { orderBy?: PuppetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PuppetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPuppetGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Puppet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PuppetClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    master<T extends PuppetMasterArgs = {}>(args?: Subset<T, PuppetMasterArgs>): CheckSelect<T, Prisma__PuppetMasterClient<PuppetMaster | null >, Prisma__PuppetMasterClient<PuppetMasterGetPayload<T> | null >>;

    strings<T extends PuppetStringsArgs = {}>(args?: Subset<T, PuppetStringsArgs>): CheckSelect<T, Prisma__PuppetStringsClient<PuppetStrings | null >, Prisma__PuppetStringsClient<PuppetStringsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Puppet base type for findUnique actions
   */
  export type PuppetFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Puppet
     * 
    **/
    select?: PuppetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetInclude | null
    /**
     * Filter, which Puppet to fetch.
     * 
    **/
    where: PuppetWhereUniqueInput
  }

  /**
   * Puppet: findUnique
   */
  export interface PuppetFindUniqueArgs extends PuppetFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Puppet base type for findFirst actions
   */
  export type PuppetFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Puppet
     * 
    **/
    select?: PuppetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetInclude | null
    /**
     * Filter, which Puppet to fetch.
     * 
    **/
    where?: PuppetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Puppets to fetch.
     * 
    **/
    orderBy?: Enumerable<PuppetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Puppets.
     * 
    **/
    cursor?: PuppetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Puppets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Puppets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Puppets.
     * 
    **/
    distinct?: Enumerable<PuppetScalarFieldEnum>
  }

  /**
   * Puppet: findFirst
   */
  export interface PuppetFindFirstArgs extends PuppetFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Puppet findMany
   */
  export type PuppetFindManyArgs = {
    /**
     * Select specific fields to fetch from the Puppet
     * 
    **/
    select?: PuppetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetInclude | null
    /**
     * Filter, which Puppets to fetch.
     * 
    **/
    where?: PuppetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Puppets to fetch.
     * 
    **/
    orderBy?: Enumerable<PuppetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Puppets.
     * 
    **/
    cursor?: PuppetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Puppets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Puppets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PuppetScalarFieldEnum>
  }


  /**
   * Puppet create
   */
  export type PuppetCreateArgs = {
    /**
     * Select specific fields to fetch from the Puppet
     * 
    **/
    select?: PuppetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetInclude | null
    /**
     * The data needed to create a Puppet.
     * 
    **/
    data: XOR<PuppetCreateInput, PuppetUncheckedCreateInput>
  }


  /**
   * Puppet createMany
   */
  export type PuppetCreateManyArgs = {
    /**
     * The data used to create many Puppets.
     * 
    **/
    data: Enumerable<PuppetCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Puppet update
   */
  export type PuppetUpdateArgs = {
    /**
     * Select specific fields to fetch from the Puppet
     * 
    **/
    select?: PuppetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetInclude | null
    /**
     * The data needed to update a Puppet.
     * 
    **/
    data: XOR<PuppetUpdateInput, PuppetUncheckedUpdateInput>
    /**
     * Choose, which Puppet to update.
     * 
    **/
    where: PuppetWhereUniqueInput
  }


  /**
   * Puppet updateMany
   */
  export type PuppetUpdateManyArgs = {
    /**
     * The data used to update Puppets.
     * 
    **/
    data: XOR<PuppetUpdateManyMutationInput, PuppetUncheckedUpdateManyInput>
    /**
     * Filter which Puppets to update
     * 
    **/
    where?: PuppetWhereInput
  }


  /**
   * Puppet upsert
   */
  export type PuppetUpsertArgs = {
    /**
     * Select specific fields to fetch from the Puppet
     * 
    **/
    select?: PuppetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetInclude | null
    /**
     * The filter to search for the Puppet to update in case it exists.
     * 
    **/
    where: PuppetWhereUniqueInput
    /**
     * In case the Puppet found by the `where` argument doesn't exist, create a new Puppet with this data.
     * 
    **/
    create: XOR<PuppetCreateInput, PuppetUncheckedCreateInput>
    /**
     * In case the Puppet was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PuppetUpdateInput, PuppetUncheckedUpdateInput>
  }


  /**
   * Puppet delete
   */
  export type PuppetDeleteArgs = {
    /**
     * Select specific fields to fetch from the Puppet
     * 
    **/
    select?: PuppetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetInclude | null
    /**
     * Filter which Puppet to delete.
     * 
    **/
    where: PuppetWhereUniqueInput
  }


  /**
   * Puppet deleteMany
   */
  export type PuppetDeleteManyArgs = {
    /**
     * Filter which Puppets to delete
     * 
    **/
    where?: PuppetWhereInput
  }


  /**
   * Puppet: findUniqueOrThrow
   */
  export type PuppetFindUniqueOrThrowArgs = PuppetFindUniqueArgsBase
      

  /**
   * Puppet: findFirstOrThrow
   */
  export type PuppetFindFirstOrThrowArgs = PuppetFindFirstArgsBase
      

  /**
   * Puppet without action
   */
  export type PuppetArgs = {
    /**
     * Select specific fields to fetch from the Puppet
     * 
    **/
    select?: PuppetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetInclude | null
  }



  /**
   * Model PuppetMaster
   */


  export type AggregatePuppetMaster = {
    _count: PuppetMasterCountAggregateOutputType | null
    _avg: PuppetMasterAvgAggregateOutputType | null
    _sum: PuppetMasterSumAggregateOutputType | null
    _min: PuppetMasterMinAggregateOutputType | null
    _max: PuppetMasterMaxAggregateOutputType | null
  }

  export type PuppetMasterAvgAggregateOutputType = {
    id: number | null
  }

  export type PuppetMasterSumAggregateOutputType = {
    id: number | null
  }

  export type PuppetMasterMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PuppetMasterMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PuppetMasterCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PuppetMasterAvgAggregateInputType = {
    id?: true
  }

  export type PuppetMasterSumAggregateInputType = {
    id?: true
  }

  export type PuppetMasterMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PuppetMasterMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PuppetMasterCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PuppetMasterAggregateArgs = {
    /**
     * Filter which PuppetMaster to aggregate.
     * 
    **/
    where?: PuppetMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PuppetMasters to fetch.
     * 
    **/
    orderBy?: Enumerable<PuppetMasterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PuppetMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PuppetMasters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PuppetMasters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PuppetMasters
    **/
    _count?: true | PuppetMasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PuppetMasterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PuppetMasterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PuppetMasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PuppetMasterMaxAggregateInputType
  }

  export type GetPuppetMasterAggregateType<T extends PuppetMasterAggregateArgs> = {
        [P in keyof T & keyof AggregatePuppetMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePuppetMaster[P]>
      : GetScalarType<T[P], AggregatePuppetMaster[P]>
  }




  export type PuppetMasterGroupByArgs = {
    where?: PuppetMasterWhereInput
    orderBy?: Enumerable<PuppetMasterOrderByWithAggregationInput>
    by: Array<PuppetMasterScalarFieldEnum>
    having?: PuppetMasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PuppetMasterCountAggregateInputType | true
    _avg?: PuppetMasterAvgAggregateInputType
    _sum?: PuppetMasterSumAggregateInputType
    _min?: PuppetMasterMinAggregateInputType
    _max?: PuppetMasterMaxAggregateInputType
  }


  export type PuppetMasterGroupByOutputType = {
    id: number
    name: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: PuppetMasterCountAggregateOutputType | null
    _avg: PuppetMasterAvgAggregateOutputType | null
    _sum: PuppetMasterSumAggregateOutputType | null
    _min: PuppetMasterMinAggregateOutputType | null
    _max: PuppetMasterMaxAggregateOutputType | null
  }

  type GetPuppetMasterGroupByPayload<T extends PuppetMasterGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PuppetMasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PuppetMasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PuppetMasterGroupByOutputType[P]>
            : GetScalarType<T[P], PuppetMasterGroupByOutputType[P]>
        }
      >
    >


  export type PuppetMasterSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    puppets?: boolean | PuppetFindManyArgs
    _count?: boolean | PuppetMasterCountOutputTypeArgs
  }

  export type PuppetMasterInclude = {
    puppets?: boolean | PuppetFindManyArgs
    _count?: boolean | PuppetMasterCountOutputTypeArgs
  }

  export type PuppetMasterGetPayload<
    S extends boolean | null | undefined | PuppetMasterArgs,
    U = keyof S
      > = S extends true
        ? PuppetMaster
    : S extends undefined
    ? never
    : S extends PuppetMasterArgs | PuppetMasterFindManyArgs
    ?'include' extends U
    ? PuppetMaster  & {
    [P in TrueKeys<S['include']>]:
        P extends 'puppets' ? Array < PuppetGetPayload<S['include'][P]>>  :
        P extends '_count' ? PuppetMasterCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'puppets' ? Array < PuppetGetPayload<S['select'][P]>>  :
        P extends '_count' ? PuppetMasterCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof PuppetMaster ? PuppetMaster[P] : never
  } 
    : PuppetMaster
  : PuppetMaster


  type PuppetMasterCountArgs = Merge<
    Omit<PuppetMasterFindManyArgs, 'select' | 'include'> & {
      select?: PuppetMasterCountAggregateInputType | true
    }
  >

  export interface PuppetMasterDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PuppetMaster that matches the filter.
     * @param {PuppetMasterFindUniqueArgs} args - Arguments to find a PuppetMaster
     * @example
     * // Get one PuppetMaster
     * const puppetMaster = await prisma.puppetMaster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PuppetMasterFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PuppetMasterFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PuppetMaster'> extends True ? CheckSelect<T, Prisma__PuppetMasterClient<PuppetMaster>, Prisma__PuppetMasterClient<PuppetMasterGetPayload<T>>> : CheckSelect<T, Prisma__PuppetMasterClient<PuppetMaster | null >, Prisma__PuppetMasterClient<PuppetMasterGetPayload<T> | null >>

    /**
     * Find the first PuppetMaster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetMasterFindFirstArgs} args - Arguments to find a PuppetMaster
     * @example
     * // Get one PuppetMaster
     * const puppetMaster = await prisma.puppetMaster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PuppetMasterFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PuppetMasterFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PuppetMaster'> extends True ? CheckSelect<T, Prisma__PuppetMasterClient<PuppetMaster>, Prisma__PuppetMasterClient<PuppetMasterGetPayload<T>>> : CheckSelect<T, Prisma__PuppetMasterClient<PuppetMaster | null >, Prisma__PuppetMasterClient<PuppetMasterGetPayload<T> | null >>

    /**
     * Find zero or more PuppetMasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetMasterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PuppetMasters
     * const puppetMasters = await prisma.puppetMaster.findMany()
     * 
     * // Get first 10 PuppetMasters
     * const puppetMasters = await prisma.puppetMaster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const puppetMasterWithIdOnly = await prisma.puppetMaster.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PuppetMasterFindManyArgs>(
      args?: SelectSubset<T, PuppetMasterFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PuppetMaster>>, PrismaPromise<Array<PuppetMasterGetPayload<T>>>>

    /**
     * Create a PuppetMaster.
     * @param {PuppetMasterCreateArgs} args - Arguments to create a PuppetMaster.
     * @example
     * // Create one PuppetMaster
     * const PuppetMaster = await prisma.puppetMaster.create({
     *   data: {
     *     // ... data to create a PuppetMaster
     *   }
     * })
     * 
    **/
    create<T extends PuppetMasterCreateArgs>(
      args: SelectSubset<T, PuppetMasterCreateArgs>
    ): CheckSelect<T, Prisma__PuppetMasterClient<PuppetMaster>, Prisma__PuppetMasterClient<PuppetMasterGetPayload<T>>>

    /**
     * Create many PuppetMasters.
     *     @param {PuppetMasterCreateManyArgs} args - Arguments to create many PuppetMasters.
     *     @example
     *     // Create many PuppetMasters
     *     const puppetMaster = await prisma.puppetMaster.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PuppetMasterCreateManyArgs>(
      args?: SelectSubset<T, PuppetMasterCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PuppetMaster.
     * @param {PuppetMasterDeleteArgs} args - Arguments to delete one PuppetMaster.
     * @example
     * // Delete one PuppetMaster
     * const PuppetMaster = await prisma.puppetMaster.delete({
     *   where: {
     *     // ... filter to delete one PuppetMaster
     *   }
     * })
     * 
    **/
    delete<T extends PuppetMasterDeleteArgs>(
      args: SelectSubset<T, PuppetMasterDeleteArgs>
    ): CheckSelect<T, Prisma__PuppetMasterClient<PuppetMaster>, Prisma__PuppetMasterClient<PuppetMasterGetPayload<T>>>

    /**
     * Update one PuppetMaster.
     * @param {PuppetMasterUpdateArgs} args - Arguments to update one PuppetMaster.
     * @example
     * // Update one PuppetMaster
     * const puppetMaster = await prisma.puppetMaster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PuppetMasterUpdateArgs>(
      args: SelectSubset<T, PuppetMasterUpdateArgs>
    ): CheckSelect<T, Prisma__PuppetMasterClient<PuppetMaster>, Prisma__PuppetMasterClient<PuppetMasterGetPayload<T>>>

    /**
     * Delete zero or more PuppetMasters.
     * @param {PuppetMasterDeleteManyArgs} args - Arguments to filter PuppetMasters to delete.
     * @example
     * // Delete a few PuppetMasters
     * const { count } = await prisma.puppetMaster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PuppetMasterDeleteManyArgs>(
      args?: SelectSubset<T, PuppetMasterDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PuppetMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetMasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PuppetMasters
     * const puppetMaster = await prisma.puppetMaster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PuppetMasterUpdateManyArgs>(
      args: SelectSubset<T, PuppetMasterUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PuppetMaster.
     * @param {PuppetMasterUpsertArgs} args - Arguments to update or create a PuppetMaster.
     * @example
     * // Update or create a PuppetMaster
     * const puppetMaster = await prisma.puppetMaster.upsert({
     *   create: {
     *     // ... data to create a PuppetMaster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PuppetMaster we want to update
     *   }
     * })
    **/
    upsert<T extends PuppetMasterUpsertArgs>(
      args: SelectSubset<T, PuppetMasterUpsertArgs>
    ): CheckSelect<T, Prisma__PuppetMasterClient<PuppetMaster>, Prisma__PuppetMasterClient<PuppetMasterGetPayload<T>>>

    /**
     * Find one PuppetMaster that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PuppetMasterFindUniqueOrThrowArgs} args - Arguments to find a PuppetMaster
     * @example
     * // Get one PuppetMaster
     * const puppetMaster = await prisma.puppetMaster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PuppetMasterFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PuppetMasterFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PuppetMasterClient<PuppetMaster>, Prisma__PuppetMasterClient<PuppetMasterGetPayload<T>>>

    /**
     * Find the first PuppetMaster that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetMasterFindFirstOrThrowArgs} args - Arguments to find a PuppetMaster
     * @example
     * // Get one PuppetMaster
     * const puppetMaster = await prisma.puppetMaster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PuppetMasterFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PuppetMasterFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PuppetMasterClient<PuppetMaster>, Prisma__PuppetMasterClient<PuppetMasterGetPayload<T>>>

    /**
     * Count the number of PuppetMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetMasterCountArgs} args - Arguments to filter PuppetMasters to count.
     * @example
     * // Count the number of PuppetMasters
     * const count = await prisma.puppetMaster.count({
     *   where: {
     *     // ... the filter for the PuppetMasters we want to count
     *   }
     * })
    **/
    count<T extends PuppetMasterCountArgs>(
      args?: Subset<T, PuppetMasterCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PuppetMasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PuppetMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetMasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PuppetMasterAggregateArgs>(args: Subset<T, PuppetMasterAggregateArgs>): PrismaPromise<GetPuppetMasterAggregateType<T>>

    /**
     * Group by PuppetMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetMasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PuppetMasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PuppetMasterGroupByArgs['orderBy'] }
        : { orderBy?: PuppetMasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PuppetMasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPuppetMasterGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PuppetMaster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PuppetMasterClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    puppets<T extends PuppetFindManyArgs = {}>(args?: Subset<T, PuppetFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Puppet>>, PrismaPromise<Array<PuppetGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PuppetMaster base type for findUnique actions
   */
  export type PuppetMasterFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PuppetMaster
     * 
    **/
    select?: PuppetMasterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetMasterInclude | null
    /**
     * Filter, which PuppetMaster to fetch.
     * 
    **/
    where: PuppetMasterWhereUniqueInput
  }

  /**
   * PuppetMaster: findUnique
   */
  export interface PuppetMasterFindUniqueArgs extends PuppetMasterFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PuppetMaster base type for findFirst actions
   */
  export type PuppetMasterFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PuppetMaster
     * 
    **/
    select?: PuppetMasterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetMasterInclude | null
    /**
     * Filter, which PuppetMaster to fetch.
     * 
    **/
    where?: PuppetMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PuppetMasters to fetch.
     * 
    **/
    orderBy?: Enumerable<PuppetMasterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PuppetMasters.
     * 
    **/
    cursor?: PuppetMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PuppetMasters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PuppetMasters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PuppetMasters.
     * 
    **/
    distinct?: Enumerable<PuppetMasterScalarFieldEnum>
  }

  /**
   * PuppetMaster: findFirst
   */
  export interface PuppetMasterFindFirstArgs extends PuppetMasterFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PuppetMaster findMany
   */
  export type PuppetMasterFindManyArgs = {
    /**
     * Select specific fields to fetch from the PuppetMaster
     * 
    **/
    select?: PuppetMasterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetMasterInclude | null
    /**
     * Filter, which PuppetMasters to fetch.
     * 
    **/
    where?: PuppetMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PuppetMasters to fetch.
     * 
    **/
    orderBy?: Enumerable<PuppetMasterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PuppetMasters.
     * 
    **/
    cursor?: PuppetMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PuppetMasters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PuppetMasters.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PuppetMasterScalarFieldEnum>
  }


  /**
   * PuppetMaster create
   */
  export type PuppetMasterCreateArgs = {
    /**
     * Select specific fields to fetch from the PuppetMaster
     * 
    **/
    select?: PuppetMasterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetMasterInclude | null
    /**
     * The data needed to create a PuppetMaster.
     * 
    **/
    data: XOR<PuppetMasterCreateInput, PuppetMasterUncheckedCreateInput>
  }


  /**
   * PuppetMaster createMany
   */
  export type PuppetMasterCreateManyArgs = {
    /**
     * The data used to create many PuppetMasters.
     * 
    **/
    data: Enumerable<PuppetMasterCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PuppetMaster update
   */
  export type PuppetMasterUpdateArgs = {
    /**
     * Select specific fields to fetch from the PuppetMaster
     * 
    **/
    select?: PuppetMasterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetMasterInclude | null
    /**
     * The data needed to update a PuppetMaster.
     * 
    **/
    data: XOR<PuppetMasterUpdateInput, PuppetMasterUncheckedUpdateInput>
    /**
     * Choose, which PuppetMaster to update.
     * 
    **/
    where: PuppetMasterWhereUniqueInput
  }


  /**
   * PuppetMaster updateMany
   */
  export type PuppetMasterUpdateManyArgs = {
    /**
     * The data used to update PuppetMasters.
     * 
    **/
    data: XOR<PuppetMasterUpdateManyMutationInput, PuppetMasterUncheckedUpdateManyInput>
    /**
     * Filter which PuppetMasters to update
     * 
    **/
    where?: PuppetMasterWhereInput
  }


  /**
   * PuppetMaster upsert
   */
  export type PuppetMasterUpsertArgs = {
    /**
     * Select specific fields to fetch from the PuppetMaster
     * 
    **/
    select?: PuppetMasterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetMasterInclude | null
    /**
     * The filter to search for the PuppetMaster to update in case it exists.
     * 
    **/
    where: PuppetMasterWhereUniqueInput
    /**
     * In case the PuppetMaster found by the `where` argument doesn't exist, create a new PuppetMaster with this data.
     * 
    **/
    create: XOR<PuppetMasterCreateInput, PuppetMasterUncheckedCreateInput>
    /**
     * In case the PuppetMaster was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PuppetMasterUpdateInput, PuppetMasterUncheckedUpdateInput>
  }


  /**
   * PuppetMaster delete
   */
  export type PuppetMasterDeleteArgs = {
    /**
     * Select specific fields to fetch from the PuppetMaster
     * 
    **/
    select?: PuppetMasterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetMasterInclude | null
    /**
     * Filter which PuppetMaster to delete.
     * 
    **/
    where: PuppetMasterWhereUniqueInput
  }


  /**
   * PuppetMaster deleteMany
   */
  export type PuppetMasterDeleteManyArgs = {
    /**
     * Filter which PuppetMasters to delete
     * 
    **/
    where?: PuppetMasterWhereInput
  }


  /**
   * PuppetMaster: findUniqueOrThrow
   */
  export type PuppetMasterFindUniqueOrThrowArgs = PuppetMasterFindUniqueArgsBase
      

  /**
   * PuppetMaster: findFirstOrThrow
   */
  export type PuppetMasterFindFirstOrThrowArgs = PuppetMasterFindFirstArgsBase
      

  /**
   * PuppetMaster without action
   */
  export type PuppetMasterArgs = {
    /**
     * Select specific fields to fetch from the PuppetMaster
     * 
    **/
    select?: PuppetMasterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetMasterInclude | null
  }



  /**
   * Model PuppetStrings
   */


  export type AggregatePuppetStrings = {
    _count: PuppetStringsCountAggregateOutputType | null
    _avg: PuppetStringsAvgAggregateOutputType | null
    _sum: PuppetStringsSumAggregateOutputType | null
    _min: PuppetStringsMinAggregateOutputType | null
    _max: PuppetStringsMaxAggregateOutputType | null
  }

  export type PuppetStringsAvgAggregateOutputType = {
    id: number | null
    count: number | null
  }

  export type PuppetStringsSumAggregateOutputType = {
    id: number | null
    count: number | null
  }

  export type PuppetStringsMinAggregateOutputType = {
    id: number | null
    count: number | null
    material: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PuppetStringsMaxAggregateOutputType = {
    id: number | null
    count: number | null
    material: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PuppetStringsCountAggregateOutputType = {
    id: number
    count: number
    material: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PuppetStringsAvgAggregateInputType = {
    id?: true
    count?: true
  }

  export type PuppetStringsSumAggregateInputType = {
    id?: true
    count?: true
  }

  export type PuppetStringsMinAggregateInputType = {
    id?: true
    count?: true
    material?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PuppetStringsMaxAggregateInputType = {
    id?: true
    count?: true
    material?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PuppetStringsCountAggregateInputType = {
    id?: true
    count?: true
    material?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PuppetStringsAggregateArgs = {
    /**
     * Filter which PuppetStrings to aggregate.
     * 
    **/
    where?: PuppetStringsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PuppetStrings to fetch.
     * 
    **/
    orderBy?: Enumerable<PuppetStringsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PuppetStringsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PuppetStrings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PuppetStrings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PuppetStrings
    **/
    _count?: true | PuppetStringsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PuppetStringsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PuppetStringsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PuppetStringsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PuppetStringsMaxAggregateInputType
  }

  export type GetPuppetStringsAggregateType<T extends PuppetStringsAggregateArgs> = {
        [P in keyof T & keyof AggregatePuppetStrings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePuppetStrings[P]>
      : GetScalarType<T[P], AggregatePuppetStrings[P]>
  }




  export type PuppetStringsGroupByArgs = {
    where?: PuppetStringsWhereInput
    orderBy?: Enumerable<PuppetStringsOrderByWithAggregationInput>
    by: Array<PuppetStringsScalarFieldEnum>
    having?: PuppetStringsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PuppetStringsCountAggregateInputType | true
    _avg?: PuppetStringsAvgAggregateInputType
    _sum?: PuppetStringsSumAggregateInputType
    _min?: PuppetStringsMinAggregateInputType
    _max?: PuppetStringsMaxAggregateInputType
  }


  export type PuppetStringsGroupByOutputType = {
    id: number
    count: number
    material: string
    createdAt: Date
    updatedAt: Date
    _count: PuppetStringsCountAggregateOutputType | null
    _avg: PuppetStringsAvgAggregateOutputType | null
    _sum: PuppetStringsSumAggregateOutputType | null
    _min: PuppetStringsMinAggregateOutputType | null
    _max: PuppetStringsMaxAggregateOutputType | null
  }

  type GetPuppetStringsGroupByPayload<T extends PuppetStringsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PuppetStringsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PuppetStringsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PuppetStringsGroupByOutputType[P]>
            : GetScalarType<T[P], PuppetStringsGroupByOutputType[P]>
        }
      >
    >


  export type PuppetStringsSelect = {
    id?: boolean
    count?: boolean
    material?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    puppets?: boolean | PuppetFindManyArgs
    _count?: boolean | PuppetStringsCountOutputTypeArgs
  }

  export type PuppetStringsInclude = {
    puppets?: boolean | PuppetFindManyArgs
    _count?: boolean | PuppetStringsCountOutputTypeArgs
  }

  export type PuppetStringsGetPayload<
    S extends boolean | null | undefined | PuppetStringsArgs,
    U = keyof S
      > = S extends true
        ? PuppetStrings
    : S extends undefined
    ? never
    : S extends PuppetStringsArgs | PuppetStringsFindManyArgs
    ?'include' extends U
    ? PuppetStrings  & {
    [P in TrueKeys<S['include']>]:
        P extends 'puppets' ? Array < PuppetGetPayload<S['include'][P]>>  :
        P extends '_count' ? PuppetStringsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'puppets' ? Array < PuppetGetPayload<S['select'][P]>>  :
        P extends '_count' ? PuppetStringsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof PuppetStrings ? PuppetStrings[P] : never
  } 
    : PuppetStrings
  : PuppetStrings


  type PuppetStringsCountArgs = Merge<
    Omit<PuppetStringsFindManyArgs, 'select' | 'include'> & {
      select?: PuppetStringsCountAggregateInputType | true
    }
  >

  export interface PuppetStringsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PuppetStrings that matches the filter.
     * @param {PuppetStringsFindUniqueArgs} args - Arguments to find a PuppetStrings
     * @example
     * // Get one PuppetStrings
     * const puppetStrings = await prisma.puppetStrings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PuppetStringsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PuppetStringsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PuppetStrings'> extends True ? CheckSelect<T, Prisma__PuppetStringsClient<PuppetStrings>, Prisma__PuppetStringsClient<PuppetStringsGetPayload<T>>> : CheckSelect<T, Prisma__PuppetStringsClient<PuppetStrings | null >, Prisma__PuppetStringsClient<PuppetStringsGetPayload<T> | null >>

    /**
     * Find the first PuppetStrings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetStringsFindFirstArgs} args - Arguments to find a PuppetStrings
     * @example
     * // Get one PuppetStrings
     * const puppetStrings = await prisma.puppetStrings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PuppetStringsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PuppetStringsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PuppetStrings'> extends True ? CheckSelect<T, Prisma__PuppetStringsClient<PuppetStrings>, Prisma__PuppetStringsClient<PuppetStringsGetPayload<T>>> : CheckSelect<T, Prisma__PuppetStringsClient<PuppetStrings | null >, Prisma__PuppetStringsClient<PuppetStringsGetPayload<T> | null >>

    /**
     * Find zero or more PuppetStrings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetStringsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PuppetStrings
     * const puppetStrings = await prisma.puppetStrings.findMany()
     * 
     * // Get first 10 PuppetStrings
     * const puppetStrings = await prisma.puppetStrings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const puppetStringsWithIdOnly = await prisma.puppetStrings.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PuppetStringsFindManyArgs>(
      args?: SelectSubset<T, PuppetStringsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PuppetStrings>>, PrismaPromise<Array<PuppetStringsGetPayload<T>>>>

    /**
     * Create a PuppetStrings.
     * @param {PuppetStringsCreateArgs} args - Arguments to create a PuppetStrings.
     * @example
     * // Create one PuppetStrings
     * const PuppetStrings = await prisma.puppetStrings.create({
     *   data: {
     *     // ... data to create a PuppetStrings
     *   }
     * })
     * 
    **/
    create<T extends PuppetStringsCreateArgs>(
      args: SelectSubset<T, PuppetStringsCreateArgs>
    ): CheckSelect<T, Prisma__PuppetStringsClient<PuppetStrings>, Prisma__PuppetStringsClient<PuppetStringsGetPayload<T>>>

    /**
     * Create many PuppetStrings.
     *     @param {PuppetStringsCreateManyArgs} args - Arguments to create many PuppetStrings.
     *     @example
     *     // Create many PuppetStrings
     *     const puppetStrings = await prisma.puppetStrings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PuppetStringsCreateManyArgs>(
      args?: SelectSubset<T, PuppetStringsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PuppetStrings.
     * @param {PuppetStringsDeleteArgs} args - Arguments to delete one PuppetStrings.
     * @example
     * // Delete one PuppetStrings
     * const PuppetStrings = await prisma.puppetStrings.delete({
     *   where: {
     *     // ... filter to delete one PuppetStrings
     *   }
     * })
     * 
    **/
    delete<T extends PuppetStringsDeleteArgs>(
      args: SelectSubset<T, PuppetStringsDeleteArgs>
    ): CheckSelect<T, Prisma__PuppetStringsClient<PuppetStrings>, Prisma__PuppetStringsClient<PuppetStringsGetPayload<T>>>

    /**
     * Update one PuppetStrings.
     * @param {PuppetStringsUpdateArgs} args - Arguments to update one PuppetStrings.
     * @example
     * // Update one PuppetStrings
     * const puppetStrings = await prisma.puppetStrings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PuppetStringsUpdateArgs>(
      args: SelectSubset<T, PuppetStringsUpdateArgs>
    ): CheckSelect<T, Prisma__PuppetStringsClient<PuppetStrings>, Prisma__PuppetStringsClient<PuppetStringsGetPayload<T>>>

    /**
     * Delete zero or more PuppetStrings.
     * @param {PuppetStringsDeleteManyArgs} args - Arguments to filter PuppetStrings to delete.
     * @example
     * // Delete a few PuppetStrings
     * const { count } = await prisma.puppetStrings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PuppetStringsDeleteManyArgs>(
      args?: SelectSubset<T, PuppetStringsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PuppetStrings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetStringsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PuppetStrings
     * const puppetStrings = await prisma.puppetStrings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PuppetStringsUpdateManyArgs>(
      args: SelectSubset<T, PuppetStringsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PuppetStrings.
     * @param {PuppetStringsUpsertArgs} args - Arguments to update or create a PuppetStrings.
     * @example
     * // Update or create a PuppetStrings
     * const puppetStrings = await prisma.puppetStrings.upsert({
     *   create: {
     *     // ... data to create a PuppetStrings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PuppetStrings we want to update
     *   }
     * })
    **/
    upsert<T extends PuppetStringsUpsertArgs>(
      args: SelectSubset<T, PuppetStringsUpsertArgs>
    ): CheckSelect<T, Prisma__PuppetStringsClient<PuppetStrings>, Prisma__PuppetStringsClient<PuppetStringsGetPayload<T>>>

    /**
     * Find one PuppetStrings that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PuppetStringsFindUniqueOrThrowArgs} args - Arguments to find a PuppetStrings
     * @example
     * // Get one PuppetStrings
     * const puppetStrings = await prisma.puppetStrings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PuppetStringsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PuppetStringsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PuppetStringsClient<PuppetStrings>, Prisma__PuppetStringsClient<PuppetStringsGetPayload<T>>>

    /**
     * Find the first PuppetStrings that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetStringsFindFirstOrThrowArgs} args - Arguments to find a PuppetStrings
     * @example
     * // Get one PuppetStrings
     * const puppetStrings = await prisma.puppetStrings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PuppetStringsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PuppetStringsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PuppetStringsClient<PuppetStrings>, Prisma__PuppetStringsClient<PuppetStringsGetPayload<T>>>

    /**
     * Count the number of PuppetStrings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetStringsCountArgs} args - Arguments to filter PuppetStrings to count.
     * @example
     * // Count the number of PuppetStrings
     * const count = await prisma.puppetStrings.count({
     *   where: {
     *     // ... the filter for the PuppetStrings we want to count
     *   }
     * })
    **/
    count<T extends PuppetStringsCountArgs>(
      args?: Subset<T, PuppetStringsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PuppetStringsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PuppetStrings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetStringsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PuppetStringsAggregateArgs>(args: Subset<T, PuppetStringsAggregateArgs>): PrismaPromise<GetPuppetStringsAggregateType<T>>

    /**
     * Group by PuppetStrings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PuppetStringsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PuppetStringsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PuppetStringsGroupByArgs['orderBy'] }
        : { orderBy?: PuppetStringsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PuppetStringsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPuppetStringsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PuppetStrings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PuppetStringsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    puppets<T extends PuppetFindManyArgs = {}>(args?: Subset<T, PuppetFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Puppet>>, PrismaPromise<Array<PuppetGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PuppetStrings base type for findUnique actions
   */
  export type PuppetStringsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PuppetStrings
     * 
    **/
    select?: PuppetStringsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetStringsInclude | null
    /**
     * Filter, which PuppetStrings to fetch.
     * 
    **/
    where: PuppetStringsWhereUniqueInput
  }

  /**
   * PuppetStrings: findUnique
   */
  export interface PuppetStringsFindUniqueArgs extends PuppetStringsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PuppetStrings base type for findFirst actions
   */
  export type PuppetStringsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PuppetStrings
     * 
    **/
    select?: PuppetStringsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetStringsInclude | null
    /**
     * Filter, which PuppetStrings to fetch.
     * 
    **/
    where?: PuppetStringsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PuppetStrings to fetch.
     * 
    **/
    orderBy?: Enumerable<PuppetStringsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PuppetStrings.
     * 
    **/
    cursor?: PuppetStringsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PuppetStrings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PuppetStrings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PuppetStrings.
     * 
    **/
    distinct?: Enumerable<PuppetStringsScalarFieldEnum>
  }

  /**
   * PuppetStrings: findFirst
   */
  export interface PuppetStringsFindFirstArgs extends PuppetStringsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PuppetStrings findMany
   */
  export type PuppetStringsFindManyArgs = {
    /**
     * Select specific fields to fetch from the PuppetStrings
     * 
    **/
    select?: PuppetStringsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetStringsInclude | null
    /**
     * Filter, which PuppetStrings to fetch.
     * 
    **/
    where?: PuppetStringsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PuppetStrings to fetch.
     * 
    **/
    orderBy?: Enumerable<PuppetStringsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PuppetStrings.
     * 
    **/
    cursor?: PuppetStringsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PuppetStrings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PuppetStrings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PuppetStringsScalarFieldEnum>
  }


  /**
   * PuppetStrings create
   */
  export type PuppetStringsCreateArgs = {
    /**
     * Select specific fields to fetch from the PuppetStrings
     * 
    **/
    select?: PuppetStringsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetStringsInclude | null
    /**
     * The data needed to create a PuppetStrings.
     * 
    **/
    data: XOR<PuppetStringsCreateInput, PuppetStringsUncheckedCreateInput>
  }


  /**
   * PuppetStrings createMany
   */
  export type PuppetStringsCreateManyArgs = {
    /**
     * The data used to create many PuppetStrings.
     * 
    **/
    data: Enumerable<PuppetStringsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PuppetStrings update
   */
  export type PuppetStringsUpdateArgs = {
    /**
     * Select specific fields to fetch from the PuppetStrings
     * 
    **/
    select?: PuppetStringsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetStringsInclude | null
    /**
     * The data needed to update a PuppetStrings.
     * 
    **/
    data: XOR<PuppetStringsUpdateInput, PuppetStringsUncheckedUpdateInput>
    /**
     * Choose, which PuppetStrings to update.
     * 
    **/
    where: PuppetStringsWhereUniqueInput
  }


  /**
   * PuppetStrings updateMany
   */
  export type PuppetStringsUpdateManyArgs = {
    /**
     * The data used to update PuppetStrings.
     * 
    **/
    data: XOR<PuppetStringsUpdateManyMutationInput, PuppetStringsUncheckedUpdateManyInput>
    /**
     * Filter which PuppetStrings to update
     * 
    **/
    where?: PuppetStringsWhereInput
  }


  /**
   * PuppetStrings upsert
   */
  export type PuppetStringsUpsertArgs = {
    /**
     * Select specific fields to fetch from the PuppetStrings
     * 
    **/
    select?: PuppetStringsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetStringsInclude | null
    /**
     * The filter to search for the PuppetStrings to update in case it exists.
     * 
    **/
    where: PuppetStringsWhereUniqueInput
    /**
     * In case the PuppetStrings found by the `where` argument doesn't exist, create a new PuppetStrings with this data.
     * 
    **/
    create: XOR<PuppetStringsCreateInput, PuppetStringsUncheckedCreateInput>
    /**
     * In case the PuppetStrings was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PuppetStringsUpdateInput, PuppetStringsUncheckedUpdateInput>
  }


  /**
   * PuppetStrings delete
   */
  export type PuppetStringsDeleteArgs = {
    /**
     * Select specific fields to fetch from the PuppetStrings
     * 
    **/
    select?: PuppetStringsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetStringsInclude | null
    /**
     * Filter which PuppetStrings to delete.
     * 
    **/
    where: PuppetStringsWhereUniqueInput
  }


  /**
   * PuppetStrings deleteMany
   */
  export type PuppetStringsDeleteManyArgs = {
    /**
     * Filter which PuppetStrings to delete
     * 
    **/
    where?: PuppetStringsWhereInput
  }


  /**
   * PuppetStrings: findUniqueOrThrow
   */
  export type PuppetStringsFindUniqueOrThrowArgs = PuppetStringsFindUniqueArgsBase
      

  /**
   * PuppetStrings: findFirstOrThrow
   */
  export type PuppetStringsFindFirstOrThrowArgs = PuppetStringsFindFirstArgsBase
      

  /**
   * PuppetStrings without action
   */
  export type PuppetStringsArgs = {
    /**
     * Select specific fields to fetch from the PuppetStrings
     * 
    **/
    select?: PuppetStringsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PuppetStringsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const PuppetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    masterId: 'masterId',
    stringId: 'stringId'
  };

  export type PuppetScalarFieldEnum = (typeof PuppetScalarFieldEnum)[keyof typeof PuppetScalarFieldEnum]


  export const PuppetMasterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PuppetMasterScalarFieldEnum = (typeof PuppetMasterScalarFieldEnum)[keyof typeof PuppetMasterScalarFieldEnum]


  export const PuppetStringsScalarFieldEnum: {
    id: 'id',
    count: 'count',
    material: 'material',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PuppetStringsScalarFieldEnum = (typeof PuppetStringsScalarFieldEnum)[keyof typeof PuppetStringsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type PuppetWhereInput = {
    AND?: Enumerable<PuppetWhereInput>
    OR?: Enumerable<PuppetWhereInput>
    NOT?: Enumerable<PuppetWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    masterId?: IntFilter | number
    master?: XOR<PuppetMasterRelationFilter, PuppetMasterWhereInput>
    strings?: XOR<PuppetStringsRelationFilter, PuppetStringsWhereInput>
    stringId?: IntFilter | number
  }

  export type PuppetOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    masterId?: SortOrder
    master?: PuppetMasterOrderByWithRelationInput
    strings?: PuppetStringsOrderByWithRelationInput
    stringId?: SortOrder
  }

  export type PuppetWhereUniqueInput = {
    id?: number
  }

  export type PuppetOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    masterId?: SortOrder
    stringId?: SortOrder
    _count?: PuppetCountOrderByAggregateInput
    _avg?: PuppetAvgOrderByAggregateInput
    _max?: PuppetMaxOrderByAggregateInput
    _min?: PuppetMinOrderByAggregateInput
    _sum?: PuppetSumOrderByAggregateInput
  }

  export type PuppetScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PuppetScalarWhereWithAggregatesInput>
    OR?: Enumerable<PuppetScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PuppetScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    masterId?: IntWithAggregatesFilter | number
    stringId?: IntWithAggregatesFilter | number
  }

  export type PuppetMasterWhereInput = {
    AND?: Enumerable<PuppetMasterWhereInput>
    OR?: Enumerable<PuppetMasterWhereInput>
    NOT?: Enumerable<PuppetMasterWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    puppets?: PuppetListRelationFilter
  }

  export type PuppetMasterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    puppets?: PuppetOrderByRelationAggregateInput
  }

  export type PuppetMasterWhereUniqueInput = {
    id?: number
  }

  export type PuppetMasterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PuppetMasterCountOrderByAggregateInput
    _avg?: PuppetMasterAvgOrderByAggregateInput
    _max?: PuppetMasterMaxOrderByAggregateInput
    _min?: PuppetMasterMinOrderByAggregateInput
    _sum?: PuppetMasterSumOrderByAggregateInput
  }

  export type PuppetMasterScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PuppetMasterScalarWhereWithAggregatesInput>
    OR?: Enumerable<PuppetMasterScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PuppetMasterScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PuppetStringsWhereInput = {
    AND?: Enumerable<PuppetStringsWhereInput>
    OR?: Enumerable<PuppetStringsWhereInput>
    NOT?: Enumerable<PuppetStringsWhereInput>
    id?: IntFilter | number
    count?: IntFilter | number
    material?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    puppets?: PuppetListRelationFilter
  }

  export type PuppetStringsOrderByWithRelationInput = {
    id?: SortOrder
    count?: SortOrder
    material?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    puppets?: PuppetOrderByRelationAggregateInput
  }

  export type PuppetStringsWhereUniqueInput = {
    id?: number
  }

  export type PuppetStringsOrderByWithAggregationInput = {
    id?: SortOrder
    count?: SortOrder
    material?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PuppetStringsCountOrderByAggregateInput
    _avg?: PuppetStringsAvgOrderByAggregateInput
    _max?: PuppetStringsMaxOrderByAggregateInput
    _min?: PuppetStringsMinOrderByAggregateInput
    _sum?: PuppetStringsSumOrderByAggregateInput
  }

  export type PuppetStringsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PuppetStringsScalarWhereWithAggregatesInput>
    OR?: Enumerable<PuppetStringsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PuppetStringsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    count?: IntWithAggregatesFilter | number
    material?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PuppetCreateInput = {
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    master: PuppetMasterCreateNestedOneWithoutPuppetsInput
    strings: PuppetStringsCreateNestedOneWithoutPuppetsInput
  }

  export type PuppetUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    masterId: number
    stringId: number
  }

  export type PuppetUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    master?: PuppetMasterUpdateOneRequiredWithoutPuppetsNestedInput
    strings?: PuppetStringsUpdateOneRequiredWithoutPuppetsNestedInput
  }

  export type PuppetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterId?: IntFieldUpdateOperationsInput | number
    stringId?: IntFieldUpdateOperationsInput | number
  }

  export type PuppetCreateManyInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    masterId: number
    stringId: number
  }

  export type PuppetUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PuppetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterId?: IntFieldUpdateOperationsInput | number
    stringId?: IntFieldUpdateOperationsInput | number
  }

  export type PuppetMasterCreateInput = {
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    puppets?: PuppetCreateNestedManyWithoutMasterInput
  }

  export type PuppetMasterUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    puppets?: PuppetUncheckedCreateNestedManyWithoutMasterInput
  }

  export type PuppetMasterUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    puppets?: PuppetUpdateManyWithoutMasterNestedInput
  }

  export type PuppetMasterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    puppets?: PuppetUncheckedUpdateManyWithoutMasterNestedInput
  }

  export type PuppetMasterCreateManyInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PuppetMasterUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PuppetMasterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PuppetStringsCreateInput = {
    count: number
    material: string
    createdAt?: Date | string
    updatedAt?: Date | string
    puppets?: PuppetCreateNestedManyWithoutStringsInput
  }

  export type PuppetStringsUncheckedCreateInput = {
    id?: number
    count: number
    material: string
    createdAt?: Date | string
    updatedAt?: Date | string
    puppets?: PuppetUncheckedCreateNestedManyWithoutStringsInput
  }

  export type PuppetStringsUpdateInput = {
    count?: IntFieldUpdateOperationsInput | number
    material?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    puppets?: PuppetUpdateManyWithoutStringsNestedInput
  }

  export type PuppetStringsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    material?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    puppets?: PuppetUncheckedUpdateManyWithoutStringsNestedInput
  }

  export type PuppetStringsCreateManyInput = {
    id?: number
    count: number
    material: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PuppetStringsUpdateManyMutationInput = {
    count?: IntFieldUpdateOperationsInput | number
    material?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PuppetStringsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    material?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type PuppetMasterRelationFilter = {
    is?: PuppetMasterWhereInput
    isNot?: PuppetMasterWhereInput
  }

  export type PuppetStringsRelationFilter = {
    is?: PuppetStringsWhereInput
    isNot?: PuppetStringsWhereInput
  }

  export type PuppetCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    masterId?: SortOrder
    stringId?: SortOrder
  }

  export type PuppetAvgOrderByAggregateInput = {
    id?: SortOrder
    masterId?: SortOrder
    stringId?: SortOrder
  }

  export type PuppetMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    masterId?: SortOrder
    stringId?: SortOrder
  }

  export type PuppetMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    masterId?: SortOrder
    stringId?: SortOrder
  }

  export type PuppetSumOrderByAggregateInput = {
    id?: SortOrder
    masterId?: SortOrder
    stringId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type PuppetListRelationFilter = {
    every?: PuppetWhereInput
    some?: PuppetWhereInput
    none?: PuppetWhereInput
  }

  export type PuppetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PuppetMasterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PuppetMasterAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PuppetMasterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PuppetMasterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PuppetMasterSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PuppetStringsCountOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    material?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PuppetStringsAvgOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
  }

  export type PuppetStringsMaxOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    material?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PuppetStringsMinOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    material?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PuppetStringsSumOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
  }

  export type PuppetMasterCreateNestedOneWithoutPuppetsInput = {
    create?: XOR<PuppetMasterCreateWithoutPuppetsInput, PuppetMasterUncheckedCreateWithoutPuppetsInput>
    connectOrCreate?: PuppetMasterCreateOrConnectWithoutPuppetsInput
    connect?: PuppetMasterWhereUniqueInput
  }

  export type PuppetStringsCreateNestedOneWithoutPuppetsInput = {
    create?: XOR<PuppetStringsCreateWithoutPuppetsInput, PuppetStringsUncheckedCreateWithoutPuppetsInput>
    connectOrCreate?: PuppetStringsCreateOrConnectWithoutPuppetsInput
    connect?: PuppetStringsWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PuppetMasterUpdateOneRequiredWithoutPuppetsNestedInput = {
    create?: XOR<PuppetMasterCreateWithoutPuppetsInput, PuppetMasterUncheckedCreateWithoutPuppetsInput>
    connectOrCreate?: PuppetMasterCreateOrConnectWithoutPuppetsInput
    upsert?: PuppetMasterUpsertWithoutPuppetsInput
    connect?: PuppetMasterWhereUniqueInput
    update?: XOR<PuppetMasterUpdateWithoutPuppetsInput, PuppetMasterUncheckedUpdateWithoutPuppetsInput>
  }

  export type PuppetStringsUpdateOneRequiredWithoutPuppetsNestedInput = {
    create?: XOR<PuppetStringsCreateWithoutPuppetsInput, PuppetStringsUncheckedCreateWithoutPuppetsInput>
    connectOrCreate?: PuppetStringsCreateOrConnectWithoutPuppetsInput
    upsert?: PuppetStringsUpsertWithoutPuppetsInput
    connect?: PuppetStringsWhereUniqueInput
    update?: XOR<PuppetStringsUpdateWithoutPuppetsInput, PuppetStringsUncheckedUpdateWithoutPuppetsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PuppetCreateNestedManyWithoutMasterInput = {
    create?: XOR<Enumerable<PuppetCreateWithoutMasterInput>, Enumerable<PuppetUncheckedCreateWithoutMasterInput>>
    connectOrCreate?: Enumerable<PuppetCreateOrConnectWithoutMasterInput>
    createMany?: PuppetCreateManyMasterInputEnvelope
    connect?: Enumerable<PuppetWhereUniqueInput>
  }

  export type PuppetUncheckedCreateNestedManyWithoutMasterInput = {
    create?: XOR<Enumerable<PuppetCreateWithoutMasterInput>, Enumerable<PuppetUncheckedCreateWithoutMasterInput>>
    connectOrCreate?: Enumerable<PuppetCreateOrConnectWithoutMasterInput>
    createMany?: PuppetCreateManyMasterInputEnvelope
    connect?: Enumerable<PuppetWhereUniqueInput>
  }

  export type PuppetUpdateManyWithoutMasterNestedInput = {
    create?: XOR<Enumerable<PuppetCreateWithoutMasterInput>, Enumerable<PuppetUncheckedCreateWithoutMasterInput>>
    connectOrCreate?: Enumerable<PuppetCreateOrConnectWithoutMasterInput>
    upsert?: Enumerable<PuppetUpsertWithWhereUniqueWithoutMasterInput>
    createMany?: PuppetCreateManyMasterInputEnvelope
    set?: Enumerable<PuppetWhereUniqueInput>
    disconnect?: Enumerable<PuppetWhereUniqueInput>
    delete?: Enumerable<PuppetWhereUniqueInput>
    connect?: Enumerable<PuppetWhereUniqueInput>
    update?: Enumerable<PuppetUpdateWithWhereUniqueWithoutMasterInput>
    updateMany?: Enumerable<PuppetUpdateManyWithWhereWithoutMasterInput>
    deleteMany?: Enumerable<PuppetScalarWhereInput>
  }

  export type PuppetUncheckedUpdateManyWithoutMasterNestedInput = {
    create?: XOR<Enumerable<PuppetCreateWithoutMasterInput>, Enumerable<PuppetUncheckedCreateWithoutMasterInput>>
    connectOrCreate?: Enumerable<PuppetCreateOrConnectWithoutMasterInput>
    upsert?: Enumerable<PuppetUpsertWithWhereUniqueWithoutMasterInput>
    createMany?: PuppetCreateManyMasterInputEnvelope
    set?: Enumerable<PuppetWhereUniqueInput>
    disconnect?: Enumerable<PuppetWhereUniqueInput>
    delete?: Enumerable<PuppetWhereUniqueInput>
    connect?: Enumerable<PuppetWhereUniqueInput>
    update?: Enumerable<PuppetUpdateWithWhereUniqueWithoutMasterInput>
    updateMany?: Enumerable<PuppetUpdateManyWithWhereWithoutMasterInput>
    deleteMany?: Enumerable<PuppetScalarWhereInput>
  }

  export type PuppetCreateNestedManyWithoutStringsInput = {
    create?: XOR<Enumerable<PuppetCreateWithoutStringsInput>, Enumerable<PuppetUncheckedCreateWithoutStringsInput>>
    connectOrCreate?: Enumerable<PuppetCreateOrConnectWithoutStringsInput>
    createMany?: PuppetCreateManyStringsInputEnvelope
    connect?: Enumerable<PuppetWhereUniqueInput>
  }

  export type PuppetUncheckedCreateNestedManyWithoutStringsInput = {
    create?: XOR<Enumerable<PuppetCreateWithoutStringsInput>, Enumerable<PuppetUncheckedCreateWithoutStringsInput>>
    connectOrCreate?: Enumerable<PuppetCreateOrConnectWithoutStringsInput>
    createMany?: PuppetCreateManyStringsInputEnvelope
    connect?: Enumerable<PuppetWhereUniqueInput>
  }

  export type PuppetUpdateManyWithoutStringsNestedInput = {
    create?: XOR<Enumerable<PuppetCreateWithoutStringsInput>, Enumerable<PuppetUncheckedCreateWithoutStringsInput>>
    connectOrCreate?: Enumerable<PuppetCreateOrConnectWithoutStringsInput>
    upsert?: Enumerable<PuppetUpsertWithWhereUniqueWithoutStringsInput>
    createMany?: PuppetCreateManyStringsInputEnvelope
    set?: Enumerable<PuppetWhereUniqueInput>
    disconnect?: Enumerable<PuppetWhereUniqueInput>
    delete?: Enumerable<PuppetWhereUniqueInput>
    connect?: Enumerable<PuppetWhereUniqueInput>
    update?: Enumerable<PuppetUpdateWithWhereUniqueWithoutStringsInput>
    updateMany?: Enumerable<PuppetUpdateManyWithWhereWithoutStringsInput>
    deleteMany?: Enumerable<PuppetScalarWhereInput>
  }

  export type PuppetUncheckedUpdateManyWithoutStringsNestedInput = {
    create?: XOR<Enumerable<PuppetCreateWithoutStringsInput>, Enumerable<PuppetUncheckedCreateWithoutStringsInput>>
    connectOrCreate?: Enumerable<PuppetCreateOrConnectWithoutStringsInput>
    upsert?: Enumerable<PuppetUpsertWithWhereUniqueWithoutStringsInput>
    createMany?: PuppetCreateManyStringsInputEnvelope
    set?: Enumerable<PuppetWhereUniqueInput>
    disconnect?: Enumerable<PuppetWhereUniqueInput>
    delete?: Enumerable<PuppetWhereUniqueInput>
    connect?: Enumerable<PuppetWhereUniqueInput>
    update?: Enumerable<PuppetUpdateWithWhereUniqueWithoutStringsInput>
    updateMany?: Enumerable<PuppetUpdateManyWithWhereWithoutStringsInput>
    deleteMany?: Enumerable<PuppetScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type PuppetMasterCreateWithoutPuppetsInput = {
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PuppetMasterUncheckedCreateWithoutPuppetsInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PuppetMasterCreateOrConnectWithoutPuppetsInput = {
    where: PuppetMasterWhereUniqueInput
    create: XOR<PuppetMasterCreateWithoutPuppetsInput, PuppetMasterUncheckedCreateWithoutPuppetsInput>
  }

  export type PuppetStringsCreateWithoutPuppetsInput = {
    count: number
    material: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PuppetStringsUncheckedCreateWithoutPuppetsInput = {
    id?: number
    count: number
    material: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PuppetStringsCreateOrConnectWithoutPuppetsInput = {
    where: PuppetStringsWhereUniqueInput
    create: XOR<PuppetStringsCreateWithoutPuppetsInput, PuppetStringsUncheckedCreateWithoutPuppetsInput>
  }

  export type PuppetMasterUpsertWithoutPuppetsInput = {
    update: XOR<PuppetMasterUpdateWithoutPuppetsInput, PuppetMasterUncheckedUpdateWithoutPuppetsInput>
    create: XOR<PuppetMasterCreateWithoutPuppetsInput, PuppetMasterUncheckedCreateWithoutPuppetsInput>
  }

  export type PuppetMasterUpdateWithoutPuppetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PuppetMasterUncheckedUpdateWithoutPuppetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PuppetStringsUpsertWithoutPuppetsInput = {
    update: XOR<PuppetStringsUpdateWithoutPuppetsInput, PuppetStringsUncheckedUpdateWithoutPuppetsInput>
    create: XOR<PuppetStringsCreateWithoutPuppetsInput, PuppetStringsUncheckedCreateWithoutPuppetsInput>
  }

  export type PuppetStringsUpdateWithoutPuppetsInput = {
    count?: IntFieldUpdateOperationsInput | number
    material?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PuppetStringsUncheckedUpdateWithoutPuppetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    material?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PuppetCreateWithoutMasterInput = {
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    strings: PuppetStringsCreateNestedOneWithoutPuppetsInput
  }

  export type PuppetUncheckedCreateWithoutMasterInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stringId: number
  }

  export type PuppetCreateOrConnectWithoutMasterInput = {
    where: PuppetWhereUniqueInput
    create: XOR<PuppetCreateWithoutMasterInput, PuppetUncheckedCreateWithoutMasterInput>
  }

  export type PuppetCreateManyMasterInputEnvelope = {
    data: Enumerable<PuppetCreateManyMasterInput>
    skipDuplicates?: boolean
  }

  export type PuppetUpsertWithWhereUniqueWithoutMasterInput = {
    where: PuppetWhereUniqueInput
    update: XOR<PuppetUpdateWithoutMasterInput, PuppetUncheckedUpdateWithoutMasterInput>
    create: XOR<PuppetCreateWithoutMasterInput, PuppetUncheckedCreateWithoutMasterInput>
  }

  export type PuppetUpdateWithWhereUniqueWithoutMasterInput = {
    where: PuppetWhereUniqueInput
    data: XOR<PuppetUpdateWithoutMasterInput, PuppetUncheckedUpdateWithoutMasterInput>
  }

  export type PuppetUpdateManyWithWhereWithoutMasterInput = {
    where: PuppetScalarWhereInput
    data: XOR<PuppetUpdateManyMutationInput, PuppetUncheckedUpdateManyWithoutPuppetsInput>
  }

  export type PuppetScalarWhereInput = {
    AND?: Enumerable<PuppetScalarWhereInput>
    OR?: Enumerable<PuppetScalarWhereInput>
    NOT?: Enumerable<PuppetScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    masterId?: IntFilter | number
    stringId?: IntFilter | number
  }

  export type PuppetCreateWithoutStringsInput = {
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    master: PuppetMasterCreateNestedOneWithoutPuppetsInput
  }

  export type PuppetUncheckedCreateWithoutStringsInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    masterId: number
  }

  export type PuppetCreateOrConnectWithoutStringsInput = {
    where: PuppetWhereUniqueInput
    create: XOR<PuppetCreateWithoutStringsInput, PuppetUncheckedCreateWithoutStringsInput>
  }

  export type PuppetCreateManyStringsInputEnvelope = {
    data: Enumerable<PuppetCreateManyStringsInput>
    skipDuplicates?: boolean
  }

  export type PuppetUpsertWithWhereUniqueWithoutStringsInput = {
    where: PuppetWhereUniqueInput
    update: XOR<PuppetUpdateWithoutStringsInput, PuppetUncheckedUpdateWithoutStringsInput>
    create: XOR<PuppetCreateWithoutStringsInput, PuppetUncheckedCreateWithoutStringsInput>
  }

  export type PuppetUpdateWithWhereUniqueWithoutStringsInput = {
    where: PuppetWhereUniqueInput
    data: XOR<PuppetUpdateWithoutStringsInput, PuppetUncheckedUpdateWithoutStringsInput>
  }

  export type PuppetUpdateManyWithWhereWithoutStringsInput = {
    where: PuppetScalarWhereInput
    data: XOR<PuppetUpdateManyMutationInput, PuppetUncheckedUpdateManyWithoutPuppetsInput>
  }

  export type PuppetCreateManyMasterInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stringId: number
  }

  export type PuppetUpdateWithoutMasterInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    strings?: PuppetStringsUpdateOneRequiredWithoutPuppetsNestedInput
  }

  export type PuppetUncheckedUpdateWithoutMasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stringId?: IntFieldUpdateOperationsInput | number
  }

  export type PuppetUncheckedUpdateManyWithoutPuppetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stringId?: IntFieldUpdateOperationsInput | number
  }

  export type PuppetCreateManyStringsInput = {
    id?: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    masterId: number
  }

  export type PuppetUpdateWithoutStringsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    master?: PuppetMasterUpdateOneRequiredWithoutPuppetsNestedInput
  }

  export type PuppetUncheckedUpdateWithoutStringsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    masterId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}